from fastapi import APIRouter, Depends, HTTPException
from schemas.player_action import PlayerAction
from services.action_service import ActionService
from services.game_service import GameService
from services.rule_engine import RuleEngine
from services.hero_ai_service import HeroAIService
from utils.logger import logger

router = APIRouter(prefix="/game", tags=["Game Actions"])

# ‚öôÔ∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –æ–±—ã—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
game_service = GameService()
rule_engine = RuleEngine()
hero_ai = HeroAIService()
action_service = ActionService(game_service, rule_engine, hero_ai)


@router.post("/{game_id}/action")
async def perform_action(game_id: str, action: PlayerAction):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ (—Ä–∞–∑—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –º–æ–Ω—Å—Ç—Ä–∞, –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏ —Ç.–¥.)
    –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.
    """
    try:
        if action.game_id != game_id:
            raise HTTPException(status_code=400, detail="Game ID mismatch")

        logger.info(f"üéÆ POST /game/{game_id}/action ‚Äî –ø–æ–ª—É—á–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ {action.action_type}")
        result = await action_service.handle_action(action)

        return {"status": "ok", "result": result}

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))
